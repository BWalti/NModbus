<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NModbusLib</name>
    </assembly>
    <members>
        <member name="T:NModbus.Extensions.ModbusAttribute">
             <summary>
             This attribute allows to mark a property with a Modbus specific offset, length, and access mode.
            
             class ModbusClass
             {
                 [Modbus(1)]
                 public ushort Value { get; set; }
            
                 [Modbus(1, 4)]
                 public ushort Value { get; set; }
            
                 [Modbus(1, 4, AccessModes.ReadOnly)]
                 public long Value { get; set; }
            
                 [Modbus(offset: 1, length: 4, access: AccessModes.ReadOnly)]
                 public double Value { get; set; }
             }
             </summary>
        </member>
        <member name="T:NModbus.Extensions.ModbusAttribute.AccessModes">
            <summary>
            The access mode (RO, RW, WO)
            </summary>
        </member>
        <member name="P:NModbus.Extensions.ModbusAttribute.Offset">
            <summary>
            The Modbus address (offset).
            </summary>
        </member>
        <member name="P:NModbus.Extensions.ModbusAttribute.Length">
            <summary>
            The Modbus number of array data items.
            </summary>
        </member>
        <member name="P:NModbus.Extensions.ModbusAttribute.Access">
            <summary>
            The Modbus access mode.
            </summary>
        </member>
        <member name="P:NModbus.Extensions.ModbusAttribute.IsReadable">
            <summary>
            Returns true if the access mode is not write only.
            </summary>
        </member>
        <member name="P:NModbus.Extensions.ModbusAttribute.IsWritable">
            <summary>
            Returns true if the access mode is not read only.
            </summary>
        </member>
        <member name="P:NModbus.Extensions.ModbusAttribute.IsReadOnly">
            <summary>
            Returns true if the access mode is read only.
            </summary>
        </member>
        <member name="P:NModbus.Extensions.ModbusAttribute.IsWriteOnly">
            <summary>
            Returns true if the access mode is write only.
            </summary>
        </member>
        <member name="M:NModbus.Extensions.ModbusAttribute.#ctor(System.UInt16,System.UInt16,NModbus.Extensions.ModbusAttribute.AccessModes)">
            <summary>
            Initializes a new instance of the <see cref="T:NModbus.Extensions.ModbusAttribute"/> class.
            </summary>
        </member>
        <member name="M:NModbus.Extensions.ModbusAttribute.GetModbusAttribute(System.Reflection.PropertyInfo)">
            <summary>
            Helper function to return the Modbus custom attribute using a PropertyInfo.
            </summary>
            <param name="info">The property info.</param>
            <returns>The Modbus offset.</returns>
        </member>
        <member name="T:NModbus.Extensions.ModbusConversions">
            <summary>
            Class holding extension for Modbus specific data conversions.
            </summary>
        </member>
        <member name="M:NModbus.Extensions.ModbusConversions.ToBitArray(System.UInt16[],System.Boolean)">
            <summary>
            Converts an array of one UInt16 value to a 16 bit BitArray.
            </summary>
            <param name="registers">The ushort array.</param>
            <param name="swapBytes">Flag indicating that the bytes have to be swapped.</param>
            <returns>The 16 bit BitArray.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusConversions.ToShort(System.UInt16[],System.Boolean)">
            <summary>
            Converts an array of UInt16 values to a 16 bit integer.
            </summary>
            <param name="registers">The ushort array.</param>
            <param name="swapBytes">Flag indicating that the bytes have to be swapped.</param>
            <returns>The 16 bit integer.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusConversions.ToUShort(System.UInt16[],System.Boolean)">
            <summary>
            Converts an array of UInt16 values to an unsigned 16 bit integer.
            </summary>
            <param name="registers">The ushort array.</param>
            <param name="swapBytes">Flag indicating that the bytes have to be swapped.</param>
            <returns>The 16 bit unsigned integer.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusConversions.ToInt32(System.UInt16[],System.Boolean,System.Boolean)">
            <summary>
            Converts an array of UInt16 values to a 32 bit integer.
            </summary>
            <param name="registers">The ushort array.</param>
            <param name="swapBytes">Flag indicating that the bytes have to be swapped.</param>
            <param name="swapWords">Flag indicating that the words have to be swapped.</param>
            <returns>The 32 bit integer.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusConversions.ToUInt32(System.UInt16[],System.Boolean,System.Boolean)">
            <summary>
            Converts an array of UInt16 values to an unsigned 32 bit integer.
            </summary>
            <param name="registers">The ushort array.</param>
            <param name="swapBytes">Flag indicating that the bytes have to be swapped.</param>
            <param name="swapWords">Flag indicating that the words have to be swapped.</param>
            <returns>The unsigned 32 bit integer.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusConversions.ToFloat(System.UInt16[],System.Boolean,System.Boolean)">
            <summary>
            Converts an array of UInt16 values to an IEEE 32 bit float number.
            </summary>
            <param name="registers">The ushort array.</param>
            <param name="swapBytes">Flag indicating that the bytes have to be swapped.</param>
            <param name="swapWords">Flag indicating that the words have to be swapped.</param>
            <returns>The IEEE 32 bit float number.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusConversions.ToDouble(System.UInt16[],System.Boolean,System.Boolean)">
            <summary>
            Converts an array of UInt16 values to an IEEE 64 bit float number.
            </summary>
            <param name="registers">The ushort array.</param>
            <param name="swapBytes">Flag indicating that the bytes have to be swapped.</param>
            <param name="swapWords">Flag indicating that the words have to be swapped.</param>
            <returns>The IEEE 64 bit float number.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusConversions.ToLong(System.UInt16[],System.Boolean,System.Boolean)">
            <summary>
            Converts an array of UInt16 values to a long integer.
            </summary>
            <param name="registers">The ushort array.</param>
            <param name="swapBytes">Flag indicating that the bytes have to be swapped.</param>
            <param name="swapWords">Flag indicating that the words have to be swapped.</param>
            <returns>The long integer.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusConversions.ToULong(System.UInt16[],System.Boolean,System.Boolean)">
            <summary>
            Converts an array of UInt16 values to an unsigned long integer.
            </summary>
            <param name="registers">The ushort array.</param>
            <param name="swapBytes">Flag indicating that the bytes have to be swapped.</param>
            <param name="swapWords">Flag indicating that the words have to be swapped.</param>
            <returns>Theunsigned long integer.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusConversions.ToASCII(System.UInt16[],System.Boolean)">
            <summary>
            Converts an array of UInt16 values to an ASCII string.
            Note that string will contain all ASCII characters until
            the first zero byte value will be encountered.
            </summary>
            <param name="registers">The ushort array.</param>
            <param name="swapBytes">Flag indicating that the bytes have to be swapped.</param>
            <returns>The ASCII string.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusConversions.ToHex(System.UInt16[],System.UInt16,System.Boolean)">
            <summary>
            Converts an array of UInt16 values to a HEX string.
            </summary>
            <param name="registers">The ushort array.</param>
            <param name="length">The number of bytes to be converted.</param>
            <param name="swapBytes">Flag indicating that the bytes have to be swapped.</param>
            <returns>The HEX string.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusConversions.ToRegisters(System.Collections.BitArray,System.Boolean)">
            <summary>
            Converts a bit array value to an array of registers (ushort).
            </summary>
            <param name="value">The bit array value.</param>
            <param name="swapBytes">Flag indicating that the bytes have to be swapped.</param>
            <returns>The array of registers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusConversions.ToRegisters(System.Int16,System.Boolean,System.Boolean)">
            <summary>
            Converts a short value to an array of registers (ushort).
            </summary>
            <param name="value">The short value.</param>
            <param name="swapBytes">Flag indicating that the bytes have to be swapped.</param>
            <param name="swapWords">Flag indicating that the words have to be swapped.</param>
            <returns>The array of registers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusConversions.ToRegisters(System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Converts an ushort value to an array of registers (ushort).
            </summary>
            <param name="value">The ushort value.</param>
            <param name="swapBytes">Flag indicating that the bytes have to be swapped.</param>
            <param name="swapWords">Flag indicating that the words have to be swapped.</param>
            <returns>The array of registers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusConversions.ToRegisters(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Converts an int value to an array of registers (ushort).
            </summary>
            <param name="value">The int value.</param>
            <param name="swapBytes">Flag indicating that the bytes have to be swapped.</param>
            <param name="swapWords">Flag indicating that the words have to be swapped.</param>
            <returns>The array of registers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusConversions.ToRegisters(System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Converts an unint value to an array of registers (ushort).
            </summary>
            <param name="value">The uint value.</param>
            <param name="swapBytes">Flag indicating that the bytes have to be swapped.</param>
            <param name="swapWords">Flag indicating that the words have to be swapped.</param>
            <returns>The array of registers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusConversions.ToRegisters(System.Single,System.Boolean,System.Boolean)">
            <summary>
            Converts a IEEE 32 bit float number to an array of UInt16 values.
            </summary>
            <param name="value">The IEEE 32 bit float number.</param>
            <param name="swapBytes">Flag indicating that the bytes have to be swapped.</param>
            <param name="swapWords">Flag indicating that the words have to be swapped.</param>
            <returns>The array of registers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusConversions.ToRegisters(System.Double,System.Boolean,System.Boolean)">
            <summary>
            Converts a IEEE 64 bit float number to an array of UInt16 values.
            </summary>
            <param name="value">The IEEE 64 bit float number.</param>
            <param name="swapBytes">Flag indicating that the bytes have to be swapped.</param>
            <param name="swapWords">Flag indicating that the words have to be swapped.</param>
            <returns>The array of registers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusConversions.ToRegisters(System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Converts a long value to an array of registers (ushort).
            </summary>
            <param name="value">The long value.</param>
            <param name="swapBytes">Flag indicating that the bytes have to be swapped.</param>
            <param name="swapWords">Flag indicating that the words have to be swapped.</param>
            <returns>The array of registers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusConversions.ToRegisters(System.UInt64,System.Boolean,System.Boolean)">
            <summary>
            Converts an ulong value to an array of registers (ushort).
            </summary>
            <param name="value">The ulong value.</param>
            <param name="swapBytes">Flag indicating that the bytes have to be swapped.</param>
            <param name="swapWords">Flag indicating that the words have to be swapped.</param>
            <returns>The array of registers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusConversions.ToRegisters(System.String,System.Boolean)">
            <summary>
            Converts a string value to an array of registers (ushort).
            </summary>
            <param name="value">The string value.</param>
            <param name="swapBytes">Flag indicating that the bytes have to be swapped.</param>
            <returns>The array of registers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusConversions.ToRegisters(System.Byte[],System.Boolean)">
            <summary>
            Converts an array of bytes to an array of registers (ushort).
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="swapBytes">Flag indicating that the bytes have to be swapped.</param>
            <returns>The array of registers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusConversions.ToBytes(System.UInt16[],System.Boolean)">
            <summary>
            Converts an array of registers to an array of bytes optionally swapping bytes.
            </summary>
            <param name="registers">The ushort array.</param>
            <param name="swap">A boolean value indicating that the bytes have to be swapped.</param>
            <returns>The array of bytes.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusConversions.SwapWords(System.UInt16[],System.Boolean)">
            <summary>
            Returns the array of registers with optionally reverse word order.
            Note that the word order is always swapped by default.
            </summary>
            <param name="registers">The ushort array.</param>
            <param name="swap">A boolean value indicating that the words have to be swapped.</param>
            <returns>The array of ushort values.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusConversions.ToHexString(System.UInt16[])">
            <summary>
            Converts an array of registers to a HEX string.
            </summary>
            <param name="registers">The array of registers.</param>
            <returns>The HEX string representation.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusConversions.ToHexString(System.Byte[])">
            <summary>
            Converts an array of bytes to a HEX string.
            </summary>
            <param name="registers">The byte array.</param>
            <returns>The HEX string representation.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusConversions.ToDigitString(System.Collections.BitArray)">
            <summary>
            Converts a 16-bit BitArray to a string of 0 and 1s.
            </summary>
            <param name="array">The bit array.</param>
            <returns>The string of 0 and 1s.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusConversions.ToBitArray(System.String)">
            <summary>
            Converts a string of 0 and 1s to a 16-bit BitArray.
            </summary>
            <param name="bits">The string of 0 and 1s.</param>
            <returns>The 16-bit BitArray.</returns>
        </member>
        <member name="T:NModbus.Extensions.ModbusMasterEx">
            <summary>
            Implementation of Modbus operations providing asynchronous and synchronous functions.
            <para>
            Additonal data types (read/write coils and holding registers) are supported:
            </para>
            <para>
                ReadString          Reads an ASCII string (multiple holding registers)
                ReadHexString       Reads an HEX string (multiple holding registers)
                ReadBool            Reads a boolean value (single coil)
                ReadBits            Reads a 16 bit array (single holding register)
                ReadShort           Reads a 16 bit integer (single holding register)
                ReadUShort          Reads an unsigned 16 bit integer (single holding register)
                ReadInt32           Reads a 32 bit integer (two holding registers)
                ReadUInt32          Reads an unsigned 32 bit integer (two holding registers)
                ReadFloat           Reads a 32 bit IEEE floating point number (two holding registers)
                ReadDouble          Reads a 64 bit IEEE floating point number (four holding registers)
                ReadLong            Reads a 64 bit integer (four holding registers)
                ReadULong           Reads an unsigned 64 bit integer (four holding registers)
                ReadBoolArray       Reads an array of boolean values (multiple coils)
                ReadBytes           Reads 8 bit values (multiple holding register)
                ReadShortArray      Reads an array of 16 bit integers (multiple holding register)
                ReadUShortArray     Reads an array of unsigned 16 bit integer (multiple holding register)
                ReadInt32Array      Reads an array of 32 bit integers (multiple holding registers)
                ReadUInt32Array     Reads an array of unsigned 32 bit integers (multiple holding registers)
                ReadFloatArray      Reads an array of 32 bit IEEE floating point numbers (multiple holding registers)
                ReadDoubleArray     Reads an array of 64 bit IEEE floating point numbers (multiple holding registers)
                ReadLongArray       Reads an array of 64 bit integers (multiple holding registers)
                ReadULongArray      Reads an array of unsigned 64 bit integers (multiple holding registers)
            </para>
            <para>
                WriteString         Writes an ASCII string (multiple holding registers)
                WriteHexString      Writes an HEX string (multiple holding registers)
                WriteBool           Writes a boolean value (single coil)
                WriteBits           Writes a 16 bit array (single holding register)
                WriteShort          Writes a 16 bit integer (single holding register)
                WriteUShort         Writes an unsigned 16 bit integer (single holding register)
                WriteInt32          Writes a 32 bit integer (two holding registers)
                WriteUInt32         Writes an unsigned 32 bit integer (two holding registers)
                WriteFloat          Writes a 32 bit IEEE floating point number (two holding registers)
                WriteDouble         Writes a 64 bit IEEE floating point number (four holding registers)
                WriteLong           Writes a 64 bit integer (four holding registers)
                WriteULong          Writes an unsigned 64 bit integer (four holding registers)
                WriteBoolArray      Writes an array of boolean values (multiple coils)
                WriteBytes          Writes 8 bit values (multiple holding register)
                WriteShortArray     Writes an array of 16 bit integers (multiple holding register)
                WriteUShortArray    Writes an array of unsigned 16 bit integer (multiple holding register)
                WriteInt32Array     Writes an array of 32 bit integers (multiple holding registers)
                WriteUInt32Array    Writes an array of unsigned 32 bit integers (multiple holding registers)
                WriteFloatArray     Writes an array of 32 bit IEEE floating point numbers (multiple holding registers)
                WriteDoubleArray    Writes an array of 64 bit IEEE floating point numbers (multiple holding registers)
                WriteLongArray      Writes an array of 64 bit integers (multiple holding registers)
                WriteULongArray     Writes an array of unsigned 64 bit integers (multiple holding registers)
            </para>
            <para>
            Additonal data types (read discrete inputs and input registers) are supported:
            </para>
            <para>
                ReadOnlyString      Reads an ASCII string (multiple input registers)
                ReadOnlyHexString   Reads an HEX string (multiple input registers)
                ReadOnlyBool        Reads a boolean value (single discrete input)
                ReadOnlyBits        Reads a 16 bit array (single holding register)
                ReadOnlyShort       Reads a 16 bit integer (single holding register)
                ReadOnlyUShort      Reads an unsigned 16 bit integer (single input register)
                ReadOnlyInt32       Reads a 32 bit integer (two input registers)
                ReadOnlyUInt32      Reads an unsigned 32 bit integer (two input registers)
                ReadOnlyFloat       Reads a 32 bit IEEE floating point number (two input registers)
                ReadOnlyDouble      Reads a 64 bit IEEE floating point number (four input registers)
                ReadOnlyLong        Reads a 64 bit integer (four input registers)
                ReadOnlyULong       Reads an unsigned 64 bit integer (four input registers)
                ReadOnlyBoolArray   Reads an array of boolean values (multiple discrete inputs)
                ReadOnlyBytes       Reads 8 bit values (multiple input register)
                ReadOnlyShortArray  Reads an array of 16 bit integers (multiple input register)
                ReadOnlyUShortArray Reads an array of unsigned 16 bit integer (multiple input register)
                ReadOnlyInt32Array  Reads an array of 32 bit integers (multiple input registers)
                ReadOnlyUInt32Array Reads an array of unsigned 32 bit integers (multiple input registers)
                ReadOnlyFloatArray  Reads an array of 32 bit IEEE floating point numbers (multiple input registers)
                ReadOnlyDoubleArray Reads an array of 64 bit IEEE floating point numbers (multiple input registers)
                ReadOnlyLongArray   Reads an array of 64 bit integers (multiple input registers)
                ReadOnlyULongArray  Reads an array of unsigned 64 bit integers (multiple input registers)
            </para>
            </summary>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadString(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            <summary>
            Reads an ASCII string (multiple holding register).
            </summary>
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="numberOfCharacters">Number of characters to read.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>ASCII string</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadHexString(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Reads a HEX string (multiple holding register).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="numberOfHex">Number of bytes to read.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>HEX string</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadBool(NModbus.IModbusMaster,System.Byte,System.UInt16)">
            <summary>
            Reads a single boolean value.
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <returns>bool value.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadBits(NModbus.IModbusMaster,System.Byte,System.UInt16)">
            <summary>
            Reads a 16 bit array (single holding register)
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <returns>16 bit BitArray.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadShort(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean)">
            <summary>
            Reads a 16 bit integer (single holding register).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>16 bit integer.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadUShort(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean)">
            <summary>
            Reads a single unsigned 16 bit integer (single holding register).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>Unsigned 16 bit integer.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadInt32(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Reads an 32 bit integer (two holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>32 bit integer.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadUInt32(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Reads a single unsigned 32 bit integer (two holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Unsigned 32 bit integer.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadFloat(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Reads a single float value (two holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Float value.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadDouble(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Reads a single double value (four holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Double value.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadLong(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Reads a 64 bit integer (four holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>64 bit integer.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadULong(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Reads an unsigned 64 bit integer (four holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Unsigned 64 bit integer.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadBoolArray(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16)">
            <summary>
            Reads an array of boolean values (multiple coils).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <returns>Array of Bool values.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadBytes(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Reads 8 bit values (multiple holding register).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>Array of bytes.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadShortArray(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Reads an array of 16 bit integers (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>Array of 16 bit integers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadUShortArray(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Reads an array of unsigned 16 bit integer (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>Array of unsigned 16 bit integer.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadInt32Array(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Reads an array of 32 bit integers (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Array of 32 bit integers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadUInt32Array(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Reads an array of unsigned 32 bit integers (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Array of unsigned 32 bit integers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadFloatArray(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Reads an array of 32 bit IEEE floating point numbers (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Array of 32 bit IEEE floating point numbers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadDoubleArray(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Reads an array of 64 bit IEEE floating point numbers (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Array of 64 bit IEEE floating point numbers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadLongArray(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Reads an array of 64 bit integers (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Array of 64 bit integers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadULongArray(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Reads an array of unsigned 64 bit integers (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Array of unsigned 64 bit integers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteString(NModbus.IModbusMaster,System.Byte,System.UInt16,System.String,System.Boolean)">
            <summary>
            Writes an ASCII string (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="text">ASCII string to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>The task representing the async void write string method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteHexString(NModbus.IModbusMaster,System.Byte,System.UInt16,System.String,System.Boolean)">
            <summary>
            Writes a HEX string (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="hex">HEX string to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>The task representing the async void write HEX string method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteBool(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean)">
            <summary>
            Writes a single boolean value (single coil).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="value">uint value to be written.</param>
            <returns>The task representing the async void write bool method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteBits(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Collections.BitArray)">
            <summary>
            Writes a 16 bit array (single holding register).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="value">BitArray value to be written.</param>
            <returns>The task representing the async void write bits method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteShort(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Int16,System.Boolean)">
            <summary>
            Writes a 16 bit integer (single holding register).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="value">Short value to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>The task representing the async void write short method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteUShort(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Writes a single unsigned 16 bit integer value.
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="value">uint value to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>The task representing the async void write unsigned short method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteInt32(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Writes a single 32 bit integer value (two holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="value">uint value to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>The task representing the async void write 32-bit integer method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteUInt32(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Writes a single unsigned 32 bit integer value (two holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="value">uint value to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>The task representing the async void write unsigned 32-bit integer method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteFloat(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Writes a single float value (two holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="value">float value to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>The task representing the async void write float method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteDouble(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Writes a single double value (four holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="value">double value to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>The task representing the async void write double method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteLong(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Writes a 64 bit integer (four holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="value">Long value to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>The task representing the async void write long method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteULong(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt64,System.Boolean,System.Boolean)">
            <summary>
            Writes an unsigned 64 bit integer (four holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="value">Short value to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>The task representing the async void write unsigned long method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteBoolArray(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean[])">
            <summary>
            Writes an array of boolean values (multiple coils)
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="values">Array of boolean values to be written.</param>
            <returns>The task representing the async void write bool array method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteBytes(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Byte[])">
            <summary>
            Writes 8 bit values (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="values">Short value to be written.</param>
            <returns>The task representing the async void write byte array method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteShortArray(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Int16[],System.Boolean)">
            <summary>
            Writes an array of 16 bit integers (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="values">Array of short values to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>The task representing the async void write short array method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteUShortArray(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16[],System.Boolean)">
            <summary>
            Writes an array of unsigned 16 bit integer (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="values">Array of unsigned short values to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>The task representing the async void write unsigned short array method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteInt32Array(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Int32[],System.Boolean,System.Boolean)">
            <summary>
            Writes an array of 32 bit integers (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="values">Array of Int32 values to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>The task representing the async void write 32-bit integer array method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteUInt32Array(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt32[],System.Boolean,System.Boolean)">
            <summary>
            Writes an array of unsigned 32 bit integers (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="values">Array of UInt32 values to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>The task representing the async void write unsigned 32-bit integer array method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteFloatArray(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Single[],System.Boolean,System.Boolean)">
            <summary>
            Writes an array of 32 bit IEEE floating point numbers (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="values">Short value to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>The task representing the async void write float array method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteDoubleArray(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Double[],System.Boolean,System.Boolean)">
            <summary>
            Writes an array of 64 bit IEEE floating point numbers (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="values">Short value to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>The task representing the async void write double array method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteLongArray(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Int64[],System.Boolean,System.Boolean)">
            <summary>
            Writes an array of 64 bit integers (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="values">Array of long values to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>The task representing the async void write long array method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteULongArray(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt64[],System.Boolean,System.Boolean)">
            <summary>
            Writes an array of unsigned 64 bit integers (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="values">Array of unsigned long values to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>The task representing the async void write unsigned long array method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyString(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Reads an ASCII string (multiple input register).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="numberOfCharacters">Number of characters to read.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>ASCII string</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyHexString(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Reads a HEX string (multiple input register).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="numberOfHex">Number of characters to read.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>ASCII string</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyBool(NModbus.IModbusMaster,System.Byte,System.UInt16)">
            <summary>
            Reads a single boolean value.
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <returns>bool value.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyBits(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean)">
            <summary>
            Reads a 16 bit array (single input register)
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>16 bit BitArray.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyShort(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean)">
            <summary>
            Reads a 16 bit integer (single input register).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>16 bit integer.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyUShort(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean)">
            <summary>
            Reads a single unsigned 16 bit integer (single input register).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>Unsigned 16 bit integer.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyInt32(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Reads an 32 bit integer (two input registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>32 bit integer.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyUInt32(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Reads a single unsigned 32 bit integer (two input registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Unsigned 32 bit integer.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyFloat(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Reads a single float value (two input registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Float value.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyDouble(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Reads a single double value (four input registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Double value.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyLong(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Reads a 64 bit integer (four input registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>64 bit integer.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyULong(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Reads an unsigned 64 bit integer (four input registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Unsigned 64 bit integer.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyBoolArray(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16)">
            <summary>
            Reads an array of boolean values (multiple discrete inputs).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <returns>Array of Bool values.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyBytes(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Reads 8 bit values (multiple input register).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>Arroy of bytes.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyShortArray(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Reads an array of 16 bit integers (multiple input registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>Array of 16 bit integers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyUShortArray(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Reads an array of unsigned 16 bit integer (multiple input registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>Array of unsigned 16 bit integer.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyInt32Array(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Reads an array of 32 bit integers (multiple input registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Array of 32 bit integers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyUInt32Array(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Reads an array of unsigned 32 bit integers (multiple input registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Array of unsigned 32 bit integers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyFloatArray(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Reads an array of 32 bit IEEE floating point numbers (multiple input registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Array of 32 bit IEEE floating point numbers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyDoubleArray(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Reads an array of 64 bit IEEE floating point numbers (multiple input registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Array of 64 bit IEEE floating point numbers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyLongArray(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Reads an array of 64 bit integers (multiple input registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Array of 64 bit integers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyULongArray(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Reads an array of unsigned 64 bit integers (multiple input registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Array of unsigned 64 bit integers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadStringAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            <summary>
            Asynchronously reads an ASCII string (multiple holding register).
            </summary>
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="numberOfCharacters">Number of characters to read.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>ASCII string</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadHexStringAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Asynchronously reads a HEX string (multiple holding register).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="numberOfHex">Number of bytes to read.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>HEX string</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadBoolAsync(NModbus.IModbusMaster,System.Byte,System.UInt16)">
            <summary>
            Asynchronously reads a single boolean value.
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <returns>bool value.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadBitsAsync(NModbus.IModbusMaster,System.Byte,System.UInt16)">
            <summary>
            Asynchronously reads a 16 bit array (single holding register)
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <returns>16 bit BitArray.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadShortAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean)">
            <summary>
            Asynchronously reads a 16 bit integer (single holding register).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>16 bit integer.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadUShortAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean)">
            <summary>
            Asynchronously reads a single unsigned 16 bit integer (single holding register).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>Unsigned 16 bit integer.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadInt32Async(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously reads an 32 bit integer (two holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>32 bit integer.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadUInt32Async(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously reads a single unsigned 32 bit integer (two holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Unsigned 32 bit integer.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadFloatAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously reads a single float value (two holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Float value.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadDoubleAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously reads a single double value (four holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Double value.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadLongAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously reads a 64 bit integer (four holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>64 bit integer.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadULongAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously reads an unsigned 64 bit integer (four holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Unsigned 64 bit integer.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadBoolArrayAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16)">
            <summary>
            Asynchronously reads an array of boolean values (multiple coils).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <returns>Array of Bool values.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadBytesAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Asynchronously reads 8 bit values (multiple holding register).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>Array of bytes.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadShortArrayAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Asynchronously reads an array of 16 bit integers (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>Array of 16 bit integers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadUShortArrayAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Asynchronously reads an array of unsigned 16 bit integer (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>Array of unsigned 16 bit integer.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadInt32ArrayAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously reads an array of 32 bit integers (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Array of 32 bit integers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadUInt32ArrayAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously reads an array of unsigned 32 bit integers (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Array of unsigned 32 bit integers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadFloatArrayAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously reads an array of 32 bit IEEE floating point numbers (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Array of 32 bit IEEE floating point numbers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadDoubleArrayAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously reads an array of 64 bit IEEE floating point numbers (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Array of 64 bit IEEE floating point numbers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadLongArrayAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously reads an array of 64 bit integers (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Array of 64 bit integers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadULongArrayAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously reads an array of unsigned 64 bit integers (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Array of unsigned 64 bit integers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteStringAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.String,System.Boolean)">
            <summary>
            Asynchronously writes an ASCII string (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="text">ASCII string to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>The task representing the async void write string method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteHexStringAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.String,System.Boolean)">
            <summary>
            Asynchronously writes a HEX string (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="hex">HEX string to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>The task representing the async void write HEX string method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteBoolAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean)">
            <summary>
            Asynchronously writes a single boolean value (single coil).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="value">uint value to be written.</param>
            <returns>The task representing the async void write bool method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteBitsAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Collections.BitArray)">
            <summary>
            Writes a 16 bit array (single holding register).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="value">BitArray value to be written.</param>
            <returns>The task representing the async void write bits method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteShortAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Int16,System.Boolean)">
            <summary>
            Asynchronously writes a 16 bit integer (single holding register).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="value">Short value to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>The task representing the async void write short method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteUShortAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Asynchronously writes a single unsigned 16 bit integer value.
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="value">uint value to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>The task representing the async void write unsigned short method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteInt32Async(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously writes a single 32 bit integer value (two holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="value">uint value to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>The task representing the async void write 32-bit integer method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteUInt32Async(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously writes a single unsigned 32 bit integer value (two holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="value">uint value to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>The task representing the async void write unsigned 32-bit integer method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteFloatAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously writes a single float value (two holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="value">float value to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>The task representing the async void write float method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteDoubleAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously writes a single double value (four holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="value">double value to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>The task representing the async void write double method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteLongAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously writes a 64 bit integer (four holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="value">Long value to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>The task representing the async void write long method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteULongAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt64,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously writes an unsigned 64 bit integer (four holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="value">Short value to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>The task representing the async void write unsigned long method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteBoolArrayAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean[])">
            <summary>
            Asynchronously writes an array of boolean values (multiple coils)
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="values">Array of boolean values to be written.</param>
            <returns>The task representing the async void write bool array method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteBytesAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Byte[])">
            <summary>
            Asynchronously writes 8 bit values (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="values">Short value to be written.</param>
            <returns>The task representing the async void write byte array method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteShortArrayAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Int16[],System.Boolean)">
            <summary>
            Asynchronously writes an array of 16 bit integers (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="values">Array of short values to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>The task representing the async void write short array method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteUShortArrayAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16[],System.Boolean)">
            <summary>
            Asynchronously writes an array of unsigned 16 bit integer (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="values">Array of unsigned short values to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>The task representing the async void write unsigned short array method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteInt32ArrayAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Int32[],System.Boolean,System.Boolean)">
            <summary>
            Asynchronously writes an array of 32 bit integers (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="values">Array of Int32 values to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>The task representing the async void write 32-bit integer array method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteUInt32ArrayAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt32[],System.Boolean,System.Boolean)">
            <summary>
            Asynchronously writes an array of unsigned 32 bit integers (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="values">Array of UInt32 values to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>The task representing the async void write unsigned 32-bit integer array method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteFloatArrayAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Single[],System.Boolean,System.Boolean)">
            <summary>
            Asynchronously writes an array of 32 bit IEEE floating point numbers (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="values">Short value to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>The task representing the async void write float array method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteDoubleArrayAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Double[],System.Boolean,System.Boolean)">
            <summary>
            Asynchronously writes an array of 64 bit IEEE floating point numbers (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="values">Short value to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>The task representing the async void write double array method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteLongArrayAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Int64[],System.Boolean,System.Boolean)">
            <summary>
            Asynchronously writes an array of 64 bit integers (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="values">Array of long values to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>The task representing the async void write long array method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.WriteULongArrayAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt64[],System.Boolean,System.Boolean)">
            <summary>
            Asynchronously writes an array of unsigned 64 bit integers (multiple holding registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to write values to.</param>
            <param name="startAddress">Address to begin writing.</param>
            <param name="values">Array of unsigned long values to be written.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>The task representing the async void write unsigned long array method.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyStringAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Asynchronously reads an ASCII string (multiple input register).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="numberOfCharacters">Number of characters to read.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>ASCII string</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyHexStringAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Asynchronously reads a HEX string (multiple input register).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="numberOfHex">Number of characters to read.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>ASCII string</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyBoolAsync(NModbus.IModbusMaster,System.Byte,System.UInt16)">
            <summary>
            Asynchronously reads a single boolean value.
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <returns>bool value.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyBitsAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean)">
            <summary>
            Asynchronously reads a 16 bit array (single input register)
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>16 bit BitArray.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyShortAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean)">
            <summary>
            Asynchronously reads a 16 bit integer (single input register).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>16 bit integer.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyUShortAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean)">
            <summary>
            Asynchronously reads a single unsigned 16 bit integer (single input register).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>Unsigned 16 bit integer.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyInt32Async(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously reads an 32 bit integer (two input registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>32 bit integer.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyUInt32Async(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously reads a single unsigned 32 bit integer (two input registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Unsigned 32 bit integer.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyFloatAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously reads a single float value (two input registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Float value.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyDoubleAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously reads a single double value (four input registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Double value.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyLongAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously reads a 64 bit integer (four input registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>64 bit integer.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyULongAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously reads an unsigned 64 bit integer (four input registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Unsigned 64 bit integer.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyBoolArrayAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16)">
            <summary>
            Asynchronously reads an array of boolean values (multiple discrete inputs).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <returns>Array of Bool values.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyBytesAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Asynchronously reads 8 bit values (multiple input register).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>Arroy of bytes.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyShortArrayAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Asynchronously reads an array of 16 bit integers (multiple input registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>Array of 16 bit integers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyUShortArrayAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Asynchronously reads an array of unsigned 16 bit integer (multiple input registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <returns>Array of unsigned 16 bit integer.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyInt32ArrayAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously reads an array of 32 bit integers (multiple input registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Array of 32 bit integers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyUInt32ArrayAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously reads an array of unsigned 32 bit integers (multiple input registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Array of unsigned 32 bit integers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyFloatArrayAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously reads an array of 32 bit IEEE floating point numbers (multiple input registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Array of 32 bit IEEE floating point numbers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyDoubleArrayAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously reads an array of 64 bit IEEE floating point numbers (multiple input registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Array of 64 bit IEEE floating point numbers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyLongArrayAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously reads an array of 64 bit integers (multiple input registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Array of 64 bit integers.</returns>
        </member>
        <member name="M:NModbus.Extensions.ModbusMasterEx.ReadOnlyULongArrayAsync(NModbus.IModbusMaster,System.Byte,System.UInt16,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously reads an array of unsigned 64 bit integers (multiple input registers).
            </summary>
            <param name="master">The modbus master instance.</param>
            <param name="slaveAddress">Address of device to read values from.</param>
            <param name="startAddress">Address to begin reading.</param>
            <param name="length">Size of array.</param>
            <param name="swapBytes">Flag indicating that bytes are swapped.</param>
            <param name="swapWords">Flag indicating that words are swapped.</param>
            <returns>Array of unsigned 64 bit integers.</returns>
        </member>
    </members>
</doc>
